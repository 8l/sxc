(#include <stdio.h>)
(#include <string.h>)

/*

djb2

this algorithm (k=33) was first reported by dan bernstein many years
ago in comp.lang.c. another version of this algorithm (now favored by
bernstein) uses xor: hash(i) = hash(i - 1) * 33 ^ str[i]

the magic of
number 33 (why it works better than many other constants, prime or
not) has never been adequately explained.

*/

(int djb2 (((unsigned char) (* s)) (int a) (int b))
 (var (unsigned long) (= hash a))
 (var int c)

 (while (= c (*?++ s))
   (= hash (+ (* hash b) c)))

 (return hash))

(int sort ((int a) (int b))
     (if (< a b)
	 (return -1)
       (else (if (> a b)
		 (return 1)
	       (else (return 0))))))
	       
(int main ((int argc) (char (** argv)))
     (var (* FILE) (= file (fopen "words.txt" "r")))
     (var char ([] word 128))
     (var (* char) ([] words 354985))
     (var (unsigned long) ([] hashes 354985))
     (var (unsigned long) ([] counts 354985))
     (var int (= nwords 0))
     (var int (= nhashes 0))

     (while (> (fscanf file "%s\n" word) 0)
       (= ([] hashes nwords) 0)
       (= ([] counts nwords) 0)
       (= ([] words (nwords ++)) (strdup word)))
       
     (var int i b)
     (for (= b 0) (< b 256) (b ++)
	  (= nhashes 0)
	  (memset hashes 0 (sizeof hashes))
	  (memset counts 0 (sizeof counts))

	  (for (= i 0) (< i nwords) (i ++)
	       (var (unsigned long) hash)
	       (= hash (djb2 (cast (* (unsigned char)) ([] words i)) 5381 b))
	       (= ([] hashes (nhashes ++)) hash))

	  (qsort hashes nhashes (sizeof ([] hashes 0)) sort)

	  (var int (= total 1))

	  (for (= i 0) (< i nhashes) (i ++)
	       (if (== ([] hashes i) ([] hashes (+ i 1)))
		   continue)
	       (total ++))

	  (printf "b: %d collisions: %d\n" b (- 354985 total))))
